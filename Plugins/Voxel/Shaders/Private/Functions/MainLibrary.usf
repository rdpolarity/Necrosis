// Copyright Voxel Plugin, Inc. All Rights Reserved.

#include "Common.ush"

// Ray-sphere intersection
// @param   RayOrigin       The origin of the ray
// @param   RayDirection    The direction of the ray
// @param   SphereCenter    The center of the sphere
// @param   SphereRadius    The radius of the sphere
// @param   Distance        The distance from the ray origin to the hit on the sphere
void RaySphereIntersect(float3 RayOrigin, float3 RayDirection, float3 SphereCenter, float SphereRadius, out float Distance) 
{
    float a = dot(RayDirection, RayDirection);
    float3 SphereCenterToRayOrigin = RayOrigin - SphereCenter;
    float b = 2.0 * dot(RayDirection, SphereCenterToRayOrigin);
    float c = dot(SphereCenterToRayOrigin, SphereCenterToRayOrigin) - (SphereRadius * SphereRadius);
	float Discriminant = b * b - 4.0 * a* c;

    if (Discriminant < 0.0) 
    {
        Distance = -1.0;
    }
    else
    {
		Distance = (-b - sqrt(Discriminant)) / 2 * a;
	} 
}

void GetRayParameters(FMaterialPixelParameters Parameters, out float3 Origin, out float3 Direction)
{
	GetRayParameters(
		GetSceneTextureUV(Parameters),
		1.f,
		Origin,
		Direction);
}

void GetSceneDepthFromRayHit(float3 Position, out float Depth)
{
	Depth = GetSceneDepthFromRayHit(Position);
}

void HashInt(uint Hash, out float4 Color)
{
	Color = HashInt(Hash);
}
void HashFloat(float Hash, out float4 Color)
{
	Color = HashInt(asuint(Hash));
}

// Texture should be a texture parameter named VoxelTextureAtlas_<Name>Texture
// Index should be a scalar parameter named VoxelTextureAtlas_<Name>Index
[Prefix = VoxelTextureAtlas_]
void Voxel_GetCubicGreedyColor(
	FMaterialPixelParameters Parameters,
	Texture2D<float4> Texture,
	const int Index,
	[Expose, Category="VOXEL_INTERNAL"]
	const int TextureSizeX,
	out float4 Color)
{
	// Parameters.TexCoords[1]
	
	const int2 UVs = GetCubicGreedyUVs(Parameters, Index, TextureSizeX);
	Color = Texture[UVs];
}
	
// Texture should be a texture parameter named VoxelTextureAtlas_<Name>Texture
// Index should be a scalar parameter named VoxelTextureAtlas_<Name>Index
[Prefix = VoxelTextureAtlas_]
void Voxel_GetCubicGreedyIndex(
	FMaterialPixelParameters Parameters,
	Texture2D<float> Texture,
	const int Index,
	[Expose, Category="VOXEL_INTERNAL"]
	const int TextureSizeX,
	out float OutIndex)
{
	// Parameters.TexCoords[1]
	
	const int2 UVs = GetCubicGreedyUVs(Parameters, Index, TextureSizeX);
	OutIndex = asuint(Texture[UVs]);
}
	
// Texture should be a texture parameter named VoxelTextureAtlas_<Name>Texture
// Index should be a scalar parameter named VoxelTextureAtlas_<Name>Index
[Prefix = VoxelTextureAtlas_]
void Voxel_GetCubicGreedyScalar(
	FMaterialPixelParameters Parameters,
	Texture2D<float> Texture,
	const int Index,
	[Expose, Category="VOXEL_INTERNAL"]
	const int TextureSizeX,
	out float Scalar)
{
	// Parameters.TexCoords[1]
	
	const int2 UVs = GetCubicGreedyUVs(Parameters, Index, TextureSizeX);
	Scalar = Texture[UVs];
}

void Voxel_ClipSpaceToWorldSpace(
	const float2 UV,
	out float3 NewPosition)
{
	NewPosition = ClipSpaceToWorldSpace(UV, 0.999f);
}

// @param	VoxelId		Hash of the voxel position hit under this pixel, between 0 and 1023
void Voxel_RaytracedCubicComposite(
	FMaterialPixelParameters Parameters,
	[Expose] Texture2D<float4> ColorTexture,
	[Expose] Texture2D<float4> NormalTexture,
	[Expose] Texture2D<float> DepthTexture,
	[Expose] float ScreenPercentage,
	bool bIsCurrentFrame,
	out float3 Color,
	out float3 Normal,
	out float3 WorldPositionOffset,
	out float PixelDepthOffset,
	out float VoxelId,
	out float3 WorldPosition)
{
    const float2 UV = GetSceneTextureUV(Parameters);
	const int2 Index = floor(UV * View.BufferSizeAndInvSize.xy * ScreenPercentage);
	const float Depth = DepthTexture[Index].r;

	const float3 DepthPosition = ClipSpaceToWorldSpace(UV, Depth);
	const float2 ScreenPosition = Parameters.TexCoords[0];

	Color = ColorTexture[Index].xyz;
	Normal = NormalTexture[Index].xyz;

	const float4x4 ClipToTranslatedWorld = bIsCurrentFrame ? View.ClipToTranslatedWorld : View.PrevClipToView * View.PrevViewToTranslatedWorld;
	WorldPositionOffset = TransformPosition(float3(GetClipSpaceFromSceneBufferUV(ScreenPosition), 0.99f), ClipToTranslatedWorld) - GetTranslatedWorldPosition(Parameters);

	PixelDepthOffset = GetSceneDepthFromRayHit(DepthPosition) - GetPixelDepth(Parameters);
	VoxelId = NormalTexture[Index].a;
	WorldPosition = DepthPosition;
}

void Voxel_RaytracedCubicComposite_VR(
	FMaterialPixelParameters Parameters,
	[Expose] Texture2D<float4> ColorTexture,
	[Expose] Texture2D<float4> NormalTexture,
	[Expose] Texture2D<float> DepthTexture,
	[Expose] float ScreenPercentage,
	[Expose] float StereoPassIndex,
	out float3 Color,
	out float3 Normal,
	out float3 WorldPositionOffset,
	out float PixelDepthOffset)
{
	if (ResolvedView.StereoPassIndex != StereoPassIndex)
	{
		WorldPositionOffset = 1000.f;
		return;
	}

    const float2 UV = GetSceneTextureUV(Parameters);
	const int2 Index = floor((ResolvedView.StereoPassIndex == 1 ? fmod(UV, float2(0.5f, 1.f)) : UV) * ResolvedView.BufferSizeAndInvSize.xy * ScreenPercentage);
	const float Depth = DepthTexture[Index].r;
	
	const float2 ClipSpacePosition = (UV - ResolvedView.ScreenPositionScaleBias.wz) / ResolvedView.ScreenPositionScaleBias.xy;
	const float3 DepthPosition = TransformPosition(float3(ClipSpacePosition, Depth), ResolvedView.ClipToRelativeWorld);
	const float2 ScreenPosition = Parameters.TexCoords[0];

	Color = ColorTexture[Index].xyz;
	Normal = NormalTexture[Index].xyz;

	WorldPositionOffset = TransformPosition(float3((ScreenPosition - ResolvedView.ScreenPositionScaleBias.wz) / ResolvedView.ScreenPositionScaleBias.xy, 0.99f), ResolvedView.ClipToTranslatedWorld) - GetTranslatedWorldPosition(Parameters);
	PixelDepthOffset = mul(float4(DepthPosition, 1.0f), ResolvedView.RelativeWorldToClip).w - GetPixelDepth(Parameters);
}

[Prefix = VoxelDetailTextures_]
void Voxel_GetDetailTextures(
	FMaterialPixelParameters Parameters,
	[Expose, Category="Voxel Generated Function Parameters"] float Enable = 0,
	[Expose, Category="Voxel Generated Function Parameters"] float VoxelSize,
	[Expose, Category="Voxel Generated Function Parameters"] int ChunkSize,
	[Expose, Category="Voxel Generated Function Parameters"] int NumCellsPerSide,
	[Expose, Category="Voxel Generated Function Parameters"] int TextureSize,
	[Expose, Category="Voxel Generated Function Parameters"] Texture2D IndirectionTexture,
	out float IsEnabled,
	out float2 UVs)
{
	BRANCH
	if (Enable == 0)
	{
		IsEnabled = Enable;
		UVs = 0;
		return;
	}
	IsEnabled = 1.f;

	const float3 PositionInChunk = LWCMultiply(GetWorldPosition_NoMaterialOffsets(Parameters), GetPrimitiveDataFromParameters(Parameters).WorldToLocal) / VoxelSize;
	const float3 CellPosition = clamp(floor(PositionInChunk), 0, ChunkSize - 1);
	uint CellIndex = SampleTexture2D_UINT(IndirectionTexture, uint2(CellPosition.x, CellPosition.y + ChunkSize * CellPosition.z));

	const uint Direction = CellIndex >> 14;
	CellIndex &= ~(3u << 14);

	UVs = float2(CellIndex % NumCellsPerSide, CellIndex / NumCellsPerSide) * TextureSize;

	float3 Delta = PositionInChunk - CellPosition;

	float2 LocalDelta = Direction == 0
		? Delta.yz
		: Direction == 1
		? Delta.xz
		: Delta.xy;

	// Skip 0.5 on each side to avoid leaking
	UVs += 0.5f + LocalDelta * (TextureSize - 1);

	UVs /= NumCellsPerSide * TextureSize;
}

void Voxel_OctahedronToUnitVector(
	float2 Octahedron,
	out float3 UnitVector)
{
	UnitVector = OctahedronToUnitVector(Octahedron * 2.f - 1.f);
}

void Voxel_GetCubicGraphPreview(
	FMaterialPixelParameters Parameters,
	[Expose] float MipLevel,
	[Expose] int TextureSize,
	[Expose] Texture2D ColorTexture,
	[Expose] float OffsetX,
	[Expose] float OffsetY,
	[Expose] float Scale,
	out float ScalarId,
	out float FaceId,
	out float3 UV,
	out float Level)
{
	Level = MipLevel;
	
	const float2 TexCoords = Parameters.TexCoords[0];
	const uint2 SampleUV = floor(TexCoords * TextureSize);

	const uint Color = SampleTexture2D_UINT(ColorTexture, SampleUV);
	const uint R = (Color >> 16) & 0xFF;
	const uint G = (Color >> 8 ) & 0xFF;
	const uint B = (Color >> 0 ) & 0xFF;
	const uint A = (Color >> 24) & 0xFF;
	
	ScalarId = R + G * 255;
	FaceId = B + A * 255;

	UV = float3(OffsetX + TexCoords.x * Scale, OffsetY + TexCoords.y * Scale, FaceId);
	UV.y = 1 - UV.y;
}

// Useful when you want to blend two worldspace normals
// Typically, VertexNormal is your vertex normal, BaseNormal the voxel detail texture normal and DetailNormal your actual normalmap
void Voxel_BlendWorldspaceNormals(
	float3 VertexNormal,
	float3 BaseNormal, 
	float3 DetailNormal, 
	out float3 Result)
{
	// See https://computergraphics.stackexchange.com/questions/2342/how-to-blend-world-space-normals

	const float3 s = VertexNormal;
	const float3 t = BaseNormal;
	const float3 u = DetailNormal;

    // Build the shortest-arc quaternion
    const float4 q = float4(cross(s, t), dot(s, t) + 1) / sqrt(2 * (dot(s, t) + 1));
 
    // Rotate the normal
    Result = u * (q.w * q.w - dot(q.xyz, q.xyz)) + 2 * q.xyz * dot(q.xyz, u) + 2 * q.w * cross(q.xyz, u);
}

void Voxel_GetMaterialLayerInfo(
	FMaterialPixelParameters Parameters,
	[Expose, Category="Voxel Generated Function Parameters"] float NumCellsPerSide,
	[Expose, Category="Voxel Generated Function Parameters"] float TextureSize,
	[Expose, Category="Voxel Generated Function Parameters"] Texture2D VoxelDetailTextures_MaterialLayerTexture,
	SamplerState VoxelDetailTextures_MaterialLayerTextureSampler,
	out float Layer00,
	out float Layer01,
	out float Layer10,
	out float Layer11,
	out float AlphaX,
	out float AlphaY)
{
	const float2 TexCoords = Parameters.TexCoords[1];
	const uint4 Layers = asuint(VoxelDetailTextures_MaterialLayerTexture.GatherRed(VoxelDetailTextures_MaterialLayerTextureSampler, TexCoords));

	Layer00 = Layers[0];
	Layer01 = Layers[1];
	Layer10 = Layers[2];
	Layer11 = Layers[3];

	const float2 Alpha = frac(TexCoords * NumCellsPerSide * TextureSize);

	AlphaX = Alpha.x;
	AlphaY = Alpha.y;
}

void Voxel_MaterialLayer_GetScalar(
	uint Layer,
	Texture2D ScalarTexture,
	out float Value)
{
	Value = ScalarTexture[uint2(Layer, 0)].r;
}