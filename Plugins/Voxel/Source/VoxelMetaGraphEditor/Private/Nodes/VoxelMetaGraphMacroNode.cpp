// Copyright Voxel Plugin, Inc. All Rights Reserved.

#include "VoxelMetaGraphMacroNode.h"
#include "VoxelMetaGraph.h"
#include "VoxelBuffer.h"
#include "VoxelMetaGraphSchema.h"
#include "VoxelMetaGraphToolkit.h"
#include "VoxelGraphEditorToolkit.h"
#include "VoxelMetaGraphMacroParameterNode.h"
#include "Toolkits/ToolkitManager.h"
#include "Subsystems/AssetEditorSubsystem.h"

void UVoxelMetaGraphMacroNode::AllocateDefaultPins()
{
	if (!MetaGraph)
	{
		return;
	}

	if (!MetaGraph->OnChanged.IsBoundToObject(this))
	{
		MetaGraph->OnChanged.AddWeakLambda(this, [=]
		{
			const TSharedPtr<FVoxelGraphEditorToolkit> Toolkit = GetToolkit();
			if (!ensure(Toolkit))
			{
				return;
			}

			static_cast<FVoxelMetaGraphEditorToolkit&>(*Toolkit).QueueRefresh();
		});
	}

	if (!MetaGraph->OnParametersChanged.IsBoundToObject(this))
	{
		MetaGraph->OnParametersChanged.AddWeakLambda(this, [=]
		{
			ReconstructNode();

			const TSharedPtr<FVoxelGraphEditorToolkit> Toolkit = GetToolkit();
			if (!ensure(Toolkit))
			{
				return;
			}

			Toolkit->OnGraphChanged();
		});
	}

	CachedDynamicPins = {};

	for (const FVoxelMetaGraphParameter& Parameter : MetaGraph->Parameters)
	{
		if (Parameter.ParameterType == EVoxelMetaGraphParameterType::LocalVariable)
		{
			continue;
		}

		if (!ensure(
			Parameter.ParameterType == EVoxelMetaGraphParameterType::MacroInput ||
			Parameter.ParameterType == EVoxelMetaGraphParameterType::MacroOutput))
		{
			continue;
		}

		const FName PinUniqueName = *Parameter.Guid.ToString();

		UEdGraphPin* GraphPin = CreatePin(
			Parameter.ParameterType == EVoxelMetaGraphParameterType::MacroInput ? EGPD_Input : EGPD_Output,
			Parameter.Type.GetEdGraphPinType(),
			PinUniqueName);

		GraphPin->PinFriendlyName = FText::FromName(Parameter.Name);

		if (Parameter.ParameterType == EVoxelMetaGraphParameterType::MacroInput)
		{
			const UEdGraph* Graph = MetaGraph->GetMainGraph();
			if (ensure(Graph))
			{
				TArray<UVoxelMetaGraphMacroParameterNode*> InputOutputNodes;
				Graph->GetNodesOfClass<UVoxelMetaGraphMacroParameterNode>(InputOutputNodes);

				for (const UVoxelMetaGraphMacroParameterNode* Node : InputOutputNodes)
				{
					if (Node->Guid == Parameter.Guid &&
						ensure(Node->Type == EVoxelMetaGraphParameterType::MacroInput))
					{
						const UEdGraphPin* TargetInputPin = Node->GetInputPin(0);
						if (!TargetInputPin->HasAnyConnections())
						{
							GraphPin->DefaultValue = TargetInputPin->DefaultValue;
							GraphPin->DefaultObject = TargetInputPin->DefaultObject;
							GraphPin->AutogeneratedDefaultValue = TargetInputPin->DefaultValue;
						}
						else
						{
							CachedDynamicPins.Add(PinUniqueName);
						}
						break;
					}
				}
			}
		}
	}

	Super::AllocateDefaultPins();
}

FText UVoxelMetaGraphMacroNode::GetNodeTitle(ENodeTitleType::Type TitleType) const
{
	if (!MetaGraph)
	{
		return {};
	}

	return FText::FromString(MetaGraph->GetMacroName());
}

FLinearColor UVoxelMetaGraphMacroNode::GetNodeTitleColor() const
{
	if (MetaGraph)
	{
		return MetaGraph->InstanceColor;
	}

	return FLinearColor::Gray;
}

FText UVoxelMetaGraphMacroNode::GetTooltipText() const
{
	if (!MetaGraph)
	{
		return {};
	}

	return FText::FromString(MetaGraph->Tooltip);
}

FSlateIcon UVoxelMetaGraphMacroNode::GetIconAndTint(FLinearColor& OutColor) const
{
	static FSlateIcon Icon("EditorStyle", "GraphEditor.Macro_16x");
	return Icon;
}

bool UVoxelMetaGraphMacroNode::ShouldHidePinDefaultValue(const UEdGraphPin& Pin) const
{
	if (Pin.Direction == EGPD_Output)
	{
		return false;
	}

	return CachedDynamicPins.Contains(Pin.PinName);
}

void UVoxelMetaGraphMacroNode::JumpToDefinition() const
{
	if (!MetaGraph)
	{
		return;
	}

	GEditor->GetEditorSubsystem<UAssetEditorSubsystem>()->OpenEditorForAsset(MetaGraph);

	const TSharedPtr<IToolkit> FoundAssetEditor = FToolkitManager::Get().FindEditorForAsset(MetaGraph);
	if (!ensure(FoundAssetEditor))
	{
		return;
	}

	FoundAssetEditor->BringToolkitToFront();
}

FName UVoxelMetaGraphMacroNode::GetPinCategory(const UEdGraphPin& Pin) const
{
	FGuid Guid;
	if (!ensure(FGuid::Parse(Pin.GetName(), Guid)))
	{
		return {};
	}

	const FVoxelMetaGraphParameter* Parameter = MetaGraph->FindParameterByGuid(Guid);
	if (!ensure(Parameter))
	{
		return {};
	}

	return *Parameter->Category;
}

TSharedRef<IVoxelNodeDefinition> UVoxelMetaGraphMacroNode::GetNodeDefinition()
{
	return MakeShared<FVoxelMetaGraphMacroNodeDefinition>(*this);
}

bool UVoxelMetaGraphMacroNode::CanCreateUnderSpecifiedSchema(const UEdGraphSchema* Schema) const
{
	return Schema->IsA<UVoxelMetaGraphSchema>();
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

FVoxelMetaGraphMacroNodeDefinition::FVoxelMetaGraphMacroNodeDefinition(UVoxelMetaGraphMacroNode& Node) : Node(Node)
{
}

TObjectPtr<UVoxelMetaGraph> FVoxelMetaGraphMacroNodeDefinition::GetMetaGraph() const
{
	return Node.MetaGraph;
}

TSharedPtr<const IVoxelNodeDefinition::FNode> FVoxelMetaGraphMacroNodeDefinition::GetInputs() const
{
	return GetPins(true);
}

TSharedPtr<const IVoxelNodeDefinition::FNode> FVoxelMetaGraphMacroNodeDefinition::GetOutputs() const
{
	return GetPins(false);
}

TSharedPtr<const IVoxelNodeDefinition::FNode> FVoxelMetaGraphMacroNodeDefinition::GetPins(const bool bInput) const
{
	TSharedRef<FNode> Root = FNode::MakeCategory({}, {});

	const TObjectPtr<UVoxelMetaGraph> MetaGraph = GetMetaGraph();
	if (!MetaGraph)
	{
		return Root;
	}

	TMap<FName, TSharedPtr<FNode>> MappedCategories;

	const auto FindOrAddCategory = [&MappedCategories](const TSharedPtr<FNode>& Parent, const FString& PathElement, const FName FullPath)
	{
		if (const TSharedPtr<FNode>& CategoryNode = MappedCategories.FindRef(FullPath))
		{
			return CategoryNode.ToSharedRef();
		}

		TSharedRef<FNode> Category = FNode::MakeCategory(FName(PathElement), FNode::MakePath(FullPath.ToString()));
		Parent->Children.Add(Category);
		MappedCategories.Add(FullPath, Category);

		return Category;
	};

	const EVoxelMetaGraphParameterType TargetType = bInput ? EVoxelMetaGraphParameterType::MacroInput : EVoxelMetaGraphParameterType::MacroOutput;

	TArray<FString> Categories = MetaGraph->GetCategories(TargetType);
	for (const FString& FullCategory : Categories)
	{
		TArray<FName> Path = FNode::MakePath(FullCategory);
		if (Path.Num() == 0)
		{
			continue;
		}

		FString CurrentPath = Path[0].ToString();
		TSharedRef<FNode> ParentCategoryNode = FindOrAddCategory(Root, CurrentPath, FName(CurrentPath));

		for (int32 Index = 1; Index < Path.Num(); Index++)
		{
			CurrentPath += "|" + Path[Index].ToString();
			ParentCategoryNode = FindOrAddCategory(ParentCategoryNode, Path[Index].ToString(), FName(CurrentPath));
		}
	}

	for (const FVoxelMetaGraphParameter& Parameter : MetaGraph->Parameters)
	{
		if (Parameter.ParameterType != TargetType)
		{
			continue;
		}

		const FName ParameterName = *Parameter.Guid.ToString();

		if (Parameter.Category.IsEmpty())
		{
			Root->Children.Add(FNode::MakePin(ParameterName, {}));
			continue;
		}

		if (const TSharedPtr<FNode>& Category = MappedCategories.FindRef(FName(Parameter.Category)))
		{
			Category->Children.Add(FNode::MakePin(ParameterName, FNode::MakePath(Parameter.Category)));
			continue;
		}

		ensure(false);
		Root->Children.Add(FNode::MakePin(ParameterName, {}));
	}

	return Root;
}